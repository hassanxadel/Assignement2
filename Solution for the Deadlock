#include <stdint.h> 
#include <stdio.h> 
#include "tm4c123gh6pm.h" 
#include "FreeRTOS.h" 
#include "task.h" 
#include "timers.h" 
#include "queue.h" 
#include "semphr.h" 
void task1(void *pvParameters); void task2(void 
*pvParameters); xSemaphoreHandle mutex1; 
xSemaphoreHandle mutex2; 
void delay(int n){ 
int i, j; for(i = 0 ; i < n; i++) 
for(j = 0; j < 3180; j++); 
} 
void initDIO(){ 
SYSCTL_RCGCGPIO_R |= 0x00000020; 
while((SYSCTL_PRGPIO_R&0x00000020) == 0){} 
GPIO_PORTF_LOCK_R = 0x4C4F434B; 
GPIO_PORTF_CR_R |= (1<<0 | 1<<4); 
 GPIO_PORTF_DIR_R |= (1<<1 | 1<<2 | 1<<3); 
GPIO_PORTF_DIR_R &=~ (1<<0 | 1<<4); 
GPIO_PORTF_PUR_R |= (1<<0 | 1<<4); 
 GPIO_PORTF_DEN_R |= (1<<0 | 1<<1 | 1<<2 | 1<<3 | 1<<4); 
GPIO_PORTF_DATA_R &=~ (1<<1 | 1<<2 | 1<<3); } 
int main (void) 
{ 
initDIO(); 
mutex1 = xSemaphoreCreateMutex(); mutex2 = 
xSemaphoreCreateMutex(); xSemaphoreGive( mutex1); 
xSemaphoreGive( mutex2); 
xTaskCreate(task1, "task1", 128, NULL,1,NULL); xTaskCreate(task2, "task2", 128, NULL,1,NULL); 
vTaskStartScheduler(); 
} 
void task1(void *pvParameters){ 
for(;;){ 
// needs the 2 mutexes to run 
xSemaphoreTake(mutex1, portMAX_DELAY); //lower number mutex first 
delay(200); //enough for systick to elapse to show deadlock 
xSemaphoreTake(mutex2, portMAX_DELAY); xSemaphoreGive(mutex1); 
xSemaphoreGive(mutex2); 
delay(200); 
} 
} 
void task2(void *pvParameters){ 
for(;;){ 
// needs the 2 mutexes to run xSemaphoreTake(mutex1, 
portMAX_DELAY); 
delay(200); //enough for systick to elapse to show deadlock 
xSemaphoreTake(mutex2, portMAX_DELAY); xSemaphoreGive(mutex1); 
xSemaphoreGive(mutex2); 
delay(200); 
} 
} 
